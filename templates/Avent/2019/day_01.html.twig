{% extends 'Avent/day.html.twig' %}

{% set year = 2019 %}

{% block article_title "Jour 01 - 10 astuces incroyables sur Symfony" %}

{% block article_content_md %}
10 astuces incroyables sur Symfony
=================================


Derri√®re ce titre accrocheur se cache en r√©alit√© l'introduction de notre calendrier de l'avent. Il s'agit d'un projet
communautaire qui a pour but de publier un article par jour sur notre site jusqu'au 24 d√©cembre ! Bienvenue donc dans
notre petite aventure, ou plut√¥t cette course aux articles de 24 jours qui fera suer plus d'un de nos membres. Nous
esp√©rons que notre travail int√©ressera, fera d√©couvrir des subtilit√©s et/ou outils.

Mais avant de commencer, connaissez-vous vraiment l'AFSY ? C'est l'occasion de poser sur papier qui nous sommes et
quelle est notre d√©marche.
1. L'AFSY c'est moi, c'est nous, c'est vous, c'est tous ceux qui d√©cident de participer √† nos actions/activit√©s;
2. L'AFSY c'est la promotion des bonnes pratiques autour de Symfony et PHP ou simplement des retours d'exp√©riences sur
   des technologies exotiques et pourquoi pas la promotion de votre dernier bundle Symfony via divers canaux : meetup, slack...
3. L'AFSY c'est surtout l'organisation d'un pot tous les mois (le [SfPot](https://www.meetup.com/fr-FR/afsy-sfpot/))
   principalement √† Paris, mais pas que !
4. L'AFSY c'est une [association de fait](https://www.associations.gouv.fr/1080-association-non-declaree.html), nous
   n'avons pas de statuts (et donc pas de compte bancaire), mais nous existons bel et bien;
5. L'AFSY c'est la maintenance d'un [site internet](https://github.com/afsy/website), historiquement h√©berg√© par
   Synalabs (merci pour toutes ces ann√©es !), et depuis peu par SymfonyCloud (merci √©galement !);
6. L'AFSY c'est aussi plusieurs canaux [Slack](http://slack.afsy.fr) sympathiques :
    - `#entraide` pour √©viter la d√©pression quand on a des bugs ou des questions d'architecture
    - `#boire-manger-paris` pour √™tre au courant des petits ap√©ros √† l'improviste
    - `#my-little-opensource` pour pr√©senter un projet open source sur lequel vous travaillez
    - `#javascript`, `#trolling` ou `#niort` pour l'humour

Tout cela ne raconte pas toute l'histoire de l'AFSY mais vous en donne une belle perspective. Rentrons maintenant dans le
vif du sujet. Chose promise, chose due. Voici vos 10 astuces ¬´ incroyables ¬ª.

## Astuce 1 : Remerciez facilement les projets open source que vous utilisez

Ajoutez le package symfony/thanks pour ajouter la commande `thanks` √† composer et ajouter des √©toiles aux d√©p√¥ts des
projets que vous utilisez. La commande `composer found` permet de facilement trouver le moyen de financer les projets
que vous utilisez.

```bash
composer require --dev symfony/thanks
composer thanks
composer found
```

## Astuce 2 : Utiliser le serveur de dump

La commande suivante vous permet d'avoir vos dump en ligne de commande dans un terminal s√©par√©. Pratique si vous avez
une architecture un peu complexe, ou simplement une API o√π vous ne voyez pas l'output. Sachez que vous pouvez
√©galement retrouver ces dumps dans l'interface du web profiler (si vous ne l'utilisez pas dans une commande).

```
bin/console server:dump
```

![Capture d'√©cran du serveur var dumper]({{ asset('build/images/avent/2019/1/var_dumper.png') }})

## Astuce 3 : utilisez le serveur du symfony-cli

Vous pouvez utiliser l'outil `symfony` (le m√™me qui sert √† d√©marrer un projet!) pour lancer votre projet en local.
Peut-√™tre que la plupart d'entre vous utilise docker, mais sachez que gr√¢ce √† cet outil vous allez gagner significativement
en performances. Et rien ne vous emp√™che d'utiliser docker en m√™me temps pour vous services tiers (type BDD).

Voici une liste non exhaustive des fonctionnalit√©s de l'outil:
- Lance une version donn√©e de PHP (en la sp√©cifiant dans le fichier `.php-version`) avec une configuration donn√©e (php.ini)
- Propose l'installation locale de certificats https valide
- Affiche les logs de votre application dans le terminal pour voir rapidement un probl√®me
- Une int√©gration avec docker pour ouvrir les services directement depuis votre terminal


[Lisez la documentation pour en apprendre plus √† ce sujet !](https://symfony.com/doc/current/setup/symfony_server.html)


## Astuce 4


## Astuce 5 : Utilisez les DQL plut√¥t que les QueryBuilder

La documentation de Doctrine a √©t√© [mise √† jour](https://github.com/doctrine/orm/pull/7880) afin d'√™tre plus clair sur
ce fait: l'utilisation des DQL c'est plus simple. Ne vous complexifiez pas la vie avec l'utilisation de QueryBuilder
lorsque vous n'en avez pas besoin. Le QueryBuilder g√©n√®re de toutes fa√ßon du DQL.

N'h√©sitez pas √† utiliser les nowdoc qui ont √©t√© r√©ellement am√©lior√©es dans PHP 7.3 ! (vous pouvez maintenant [les
indenter](https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes) !)


## Astuce 6 : Utilisez les middleware de doctrine avec messenger

Si vous avez d√©cid√© d'utiliser Messenger, vous allez probablement modifier des donn√©es dans vos messages handler. Et
si ceux-ci sont asynchrones vous pouvez avoir plusieurs erreurs:
- La connexion SQL qui se termine (les connexions aux bases de donn√©es ont souvent un timeout)
- Ex√©cuter votre worker dans une transaction
- Votre entity manager contient des informations obsol√®tes

A chaque probl√®me sa solution, le DoctrineBridge vous propose plusieurs middleware disponible que vous pouvez ajouter
facilement dans la configuration de votre application.

```yaml
# config/packages/messenger.yaml
framework:
    messenger:
        buses:
            command_bus:
                middleware:
                    # A chaque fois qu'un message est trait√©, la connexion est "pingu√©e"
                    # en cas d'erreur une nouvelle connexion est ouverte
                    - doctrine_ping_connection

                    # La connexion est ouverte avant votre handler, ef ferm√©e
                    # tout de suite apr√®s au lieu de la conserver ouverte pour toujours
                    - doctrine_close_connection

                    # Enveloppe votre handler dans une seule transaction Doctrine
                    # votre handler n'a pas besoin d'appeler flush et une erreur
                    # provoquera un rollback automatiquement.
                    - doctrine_transaction

                    # Nettoie l'entity manager avant de l'envoyer √† votre handler
                    - doctrine_clear_entity_manager
```


## Astuce 7


## Astuce 8


## Astuce 9 : arr√™tez d'utiliser useResultCache dans les nouvelles versions de Doctrine

Un des changements r√©cents qui peut vous impacter dans Doctrine est le choix de d√©pr√©cier `useResultCache` au profit des
m√©thodes `enableResultCache` et `disableResultCache` qui simplifient l√©g√®rement l'√©criture de votre code. Pensez √†
changer aujourd'hui pour demain si vous utilisez les derni√®res versions de Doctrine !

```php
// üëå  Nice and smooth in ORM 2:

$res = $entityManager
->createQuery($dql)
->useResultCache($cache_enabled, $ttl)
->getResult();

#####

// ‚ú®üëå‚ú®  Nicer and smoother in ORM 2:
// globally replace the cache with a volatile cache
// stop passing $cache_enabled through a bazillion layers

$res = $entityManager
->createQuery($dql)
->enableResultCache($ttl)
->getResult();
```

## Astuce 10 : soyez un pro de l'uuid !

Le saviez vous, la plupart des syst√®mes d'exploitation ont une commande `uuid`, pratique pour √©crire un test qui utilise
des uuids.

Et si vous voulez utiliser les uuids mais que vous n'avez pas l'extension PHP activ√©e, pas d'inqui√©tude. Utilisez le
polyfill disponible dans Symfony:

```bash
composer require symfony/polyfill-uuid
```

```php
$uuid = uuid_create(UUID_TYPE_RANDOM);
// $uuid = '79a0f84a-2f15-4ea9-bb2c-49e645845100'

$isValid = uuid_is_valid($uuid);
// $isValid = true
```

Si [l'extension PECL](https://pecl.php.net/package/uuid) est install√©e, alors elle sera utilis√©e.

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('/build/images/avent/2019/1/afsy.png') }}"
         alt="Cyril Souillard"/>
{% endblock %}

{% block article_bio %}
    <h2><a href="{% block author_url 'https://twitter.com/CyrilSouillard' %}"
           target="_blank">{% block article_author 'Cyril Souillard' %}</a></h2>
    <p>
        <abbr title="Chief Technical Officer" lang="en">CTO</abbr> chez <a href="https://www.mylittlebox.fr/"
                                                                           target="_blank">MyLittleBox</a>.
    </p>
{% endblock %}
