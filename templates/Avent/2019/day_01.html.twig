{% extends 'Avent/day.html.twig' %}

{% set year = 2019 %}

{% block article_title "Jour 01 - 10 astuces incroyables sur Symfony" %}

{% block article_content_md %}
10 astuces incroyables sur Symfony
=================================


Derrière ce titre accrocheur se cache en réalité l'introduction de notre calendrier de l'avent. Il s'agit d'un projet
communautaire qui a pour but de fournir un article par jour sur notre site jusqu'au 24 décembre ! Bienvenue donc dans
notre petite aventure, ou plutôt cette course aux articles de 24 jours qui fera suer plus d'un de nos membres. Nous
espérons que notre travail intéressera, fera découvrir des subtilités et/ou outils.

Mais avant de commencer, connaissez-vous vraiment l'AFSY ? C'est l'occasion de poser sur papier qui nous sommes et
quelle est notre démarche.
1. L'AFSY c'est moi, c'est nous, c'est vous, c'est tous ceux qui décident de participer à nos actions/activités;
2. L'AFSY c'est la promotion des bonnes pratiques autour de Symfony et PHP ou simplement des retours d'expériences sur
   des technos exotiques et pourquoi pas la promotion de votre dernier bundle Symfony via divers canaux: meetup, slack...
3. L'AFSY c'est surtout l'organisation d'un pot tous les mois (le [SfPot](https://www.meetup.com/fr-FR/afsy-sfpot/))
   principalement à Paris, mais pas que !
4. L'AFSY c'est une [association de faits](https://www.associations.gouv.fr/1080-association-non-declaree.html), nous
   n'avons pas de statuts (et donc pas de compte bancaire), mais nous existons bel et bien;
5. L'AFSY c'est la maintenance d'un [site internet](https://github.com/afsy/website), historiquement hébergé par
   Synalabs (merci pour toutes ces années !), et depuis peu par SymfonyCloud (merci également !);
6. L'AFSY c'est aussi plusieurs canaux [Slack](http://slack.afsy.fr) sympathiques :
    - `#entraide` pour éviter la dépression quand on a des bugs ou des questions d'archi
    - `#boire-manger-paris` pour être au courant des petits apéros à l'improviste
    - `#my-little-opensource` pour présenter un projet open source sur lequel vous travaillez
    - `#javascript`, `#trolling` ou `#niort` pour l'humour

Tout cela ne raconte pas toute l'histoire de l'AFSY mais vous en donne une belle perspective. Rentrons maintenant dans le
vif du sujet. Chose promise, chose due. Voici vos 10 astuces « incroyables ».

## Astuce 1 : Remerciez facilement les projets open source que vous utilisez

Ajoutez le package symfony/thanks pour ajouter la commande `thanks` à composer et ajouter des étoiles aux dépôts des
projets que vous utilisez. La commande `composer found` permet de facilement trouver le moyen de financer les projets
que vous utilisez.

```bash
composer require --dev symfony/thanks
composer thanks
composer found
```

## Astuce 2 : Utiliser le serveur de dump

La commande suivante vous permet d'avoir vos dump en ligne de commande dans un terminal séparé. Pratique si vous avez
une architecture un peu complexe, ou simplement une API où vous ne voyez pas l'output. Sachez que vous pouvez
également retrouver ces dumps dans l'interface du web profiler (si vous ne l'utilisez pas dans une commande).

```
bin/console server:dump
```

![Capture d'écran du serveur var dumper]({{ asset('build/images/avent/2019/1/var_dumper.png') }})

## Astuce 3 : utilisez le serveur du symfony-cli

Vous pouvez utiliser l'outil `symfony` (le même qui sert à démarrer un projet!) pour lancer votre projet en local.
Peut-être que la plupart d'entre vous utilise docker, mais sachez que grâce à cet outil vous allez gagner significativement
en performances. Et rien ne vous empêche d'utiliser docker en même temps pour vous services tiers (type BDD).

Voici une liste non exhaustive des fonctionnalités de l'outil:
- Lance une version donnée de PHP (en la spécifiant dans le fichier `.php-version`) avec une configuration donnée (php.ini)
- Propose l'installation locale de certificats https valide
- Affiche les logs de votre application dans le terminal pour voir rapidement un problème
- Une intégration avec docker pour ouvrir les services directement depuis votre terminal


[Lisez la documentation pour en apprendre plus à ce sujet !](https://symfony.com/doc/current/setup/symfony_server.html)


## Astuce 4


## Astuce 5


## Astuce 6


## Astuce 7


## Astuce 8


## Astuce 9


## Astuce 10

Le saviez vous, la plupart des systèmes d'exploitation ont une commande `uuid`, pratique pour écrire un test qui utilise
des uuids.

Et si vous voulez utiliser les uuids mais que vous n'avez pas l'extension PHP activée, pas d'inquiétude. Utilisez le
polyfill disponible dans Symfony:

```bash
composer require symfony/polyfill-uuid
```

```php
$uuid = uuid_create(UUID_TYPE_RANDOM);
// $uuid = '79a0f84a-2f15-4ea9-bb2c-49e645845100'

$isValid = uuid_is_valid($uuid);
// $isValid = true
```

Si [l'extension PECL](https://pecl.php.net/package/uuid) est installée, alors elle sera utilisée.

{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('/build/images/avent/2019/1/afsy.png') }}"
         alt="Cyril Souillard"/>
{% endblock %}

{% block article_bio %}
    <h2><a href="{% block author_url 'https://twitter.com/CyrilSouillard' %}"
           target="_blank">{% block article_author 'Cyril Souillard' %}</a></h2>
    <p>
        <abbr title="Chief Technical Officer" lang="en">CTO</abbr> chez <a href="https://www.mylittlebox.fr/"
                                                                           target="_blank">MyLittleBox</a>.
    </p>
{% endblock %}
